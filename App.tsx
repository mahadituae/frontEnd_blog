import React, { useState, useEffect, useCallback, useMemo } from 'react';
import type { BlogPostType } from './types';
import { fetchBlogPosts } from './services/geminiService';
import { mockPosts } from './services/mockData';
import BlogPostList from './components/BlogPostList';
import BlogPost from './components/BlogPost';
import LoadingSpinner from './components/LoadingSpinner';
import ErrorMessage from './components/ErrorMessage';
import Header from './components/Header';
import FilterControls from './components/FilterControls';

const App: React.FC = () => {
  const [posts, setPosts] = useState<BlogPostType[]>(mockPosts);
  const [selectedPost, setSelectedPost] = useState<BlogPostType | null>(null);
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTag, setActiveTag] = useState<string | null>(null);
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');

  const generateNewPosts = useCallback(async () => {
    setIsGenerating(true);
    setError(null);
    try {
      const fetchedPosts = await fetchBlogPosts();
      setPosts(fetchedPosts);
      setActiveTag(null);
      setActiveCategory(null);
      setSearchQuery('');
      if (fetchedPosts.length > 0) {
        setTimeout(() => setSelectedPost(fetchedPosts[0]), 50);
      } else {
        setSelectedPost(null);
      }
    } catch (err) {
      setError('Failed to generate new posts. Please check your API key and try again.');
      console.error(err);
    } finally {
      setIsGenerating(false);
    }
  }, []);
  
  useEffect(() => {
    if (posts.length > 0) {
      setSelectedPost(posts[0]);
    }
  }, []);

  useEffect(() => {
    if (selectedPost) {
      document.title = `${selectedPost.title} | The AI-Powered Press`;
      document.querySelector('meta[name="description"]')?.setAttribute('content', selectedPost.metaDescription);
    } else {
        document.title = 'The AI-Powered Press | Future of Web Dev';
        document.querySelector('meta[name="description"]')?.setAttribute('content', 'Explore the future of web development with insights and articles generated by advanced AI. A blog by The AI-Powered Press.');
    }
  }, [selectedPost]);

  const handleSelectPost = (post: BlogPostType) => {
    setSelectedPost(null); 
    setTimeout(() => setSelectedPost(post), 50);
  };
  
  const allTags = useMemo(() => [...new Set(posts.flatMap(p => p.tags))], [posts]);
  const allCategories = useMemo(() => [...new Set(posts.map(p => p.category))], [posts]);
  
  const filteredPosts = useMemo(() => {
      return posts.filter(post => {
        const searchMatch = searchQuery.toLowerCase() 
            ? post.title.toLowerCase().includes(searchQuery) || post.content.toLowerCase().includes(searchQuery)
            : true;
        const categoryMatch = activeCategory ? post.category === activeCategory : true;
        const tagMatch = activeTag ? post.tags.includes(activeTag) : true;
        return searchMatch && categoryMatch && tagMatch;
      });
  }, [posts, searchQuery, activeCategory, activeTag]);
  
  useEffect(() => {
      const isSelectedPostInFilteredList = filteredPosts.some(p => p.id === selectedPost?.id);
      if (!isSelectedPostInFilteredList) {
          setSelectedPost(filteredPosts.length > 0 ? filteredPosts[0] : null);
      }
  }, [filteredPosts, selectedPost]);


  return (
    <div className="min-h-screen bg-gray-100/50 text-gray-800 font-sans">
      <Header />
      <main className="container mx-auto p-4 sm:p-6 lg:p-8">
        {error && <ErrorMessage message={error} />}
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8 mt-4">
          <aside className="lg:col-span-4 xl:col-span-3">
            <div className="sticky top-24 bg-white p-6 rounded-xl shadow-sm border border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900 mb-6 font-serif">Explore Posts</h2>
              <FilterControls 
                searchQuery={searchQuery}
                onSearchChange={setSearchQuery}
                categories={allCategories}
                activeCategory={activeCategory}
                onSelectCategory={setActiveCategory}
                tags={allTags} 
                activeTag={activeTag} 
                onSelectTag={setActiveTag} 
              />
              <BlogPostList 
                posts={filteredPosts} 
                selectedPost={selectedPost} 
                onSelectPost={handleSelectPost}
              />
              <div className="mt-8 pt-6 border-t border-gray-200">
                 <button 
                    onClick={generateNewPosts}
                    disabled={isGenerating}
                    className="w-full flex items-center justify-center gap-2 bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-indigo-700 transition-all duration-200 disabled:bg-indigo-300 disabled:cursor-not-allowed"
                 >
                    {isGenerating ? (
                       <>
                         <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                           <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                           <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                         </svg>
                         Generating...
                       </>
                    ) : 'Generate New Posts'}
                 </button>
                 <p className="text-xs text-gray-500 mt-3 text-center">Click to generate new content with AI.</p>
              </div>
            </div>
          </aside>
          <div className="lg:col-span-8 xl:col-span-9">
             {isGenerating && !posts.length ? (
                 <div className="flex justify-center items-center" style={{ height: 'calc(100vh - 10rem)'}}>
                    <LoadingSpinner />
                 </div>
             ) : (
                <BlogPost post={selectedPost} key={selectedPost?.id} />
             )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default App;